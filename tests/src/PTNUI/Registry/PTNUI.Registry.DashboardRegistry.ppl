import PTNUI:Model:LandingPageTab;
import PTNUI:Model:Tile;
import PTNUI:Registry:NUIRegistry;

class DashboardRegistry extends PTNUI:Registry:NUIRegistry
   method DashboardRegistry(&dashboardName As string);
   method LoadUserTiles(&portal As ApiObject, &lpt As PTNUI:Model:LandingPageTab);
   method LoadSystemTiles(&portal As ApiObject, &lpt As PTNUI:Model:LandingPageTab);
   method SaveUserTiles(&portal As ApiObject, &lpt As PTNUI:Model:LandingPageTab);
   
   property string Name get;
   property boolean Exists get;
private
   instance string &m_name;
   instance boolean &m_exists;
end-class;

method DashboardRegistry
   /+ &dashboardName as String +/
   %Super = create PTNUI:Registry:NUIRegistry();
   &m_name = &dashboardName;
   &m_exists = False;
end-method;

get Name
   /+ Returns String +/
   Return %This.m_name;
end-get;

get Exists
   /+ Returns Boolean +/
   Return %This.m_exists;
end-get;

method LoadUserTiles
   /+ &portal as ApiObject, +/
   /+ &lpt as PTNUI:Model:LandingPageTab +/
   Local ApiObject &userTab = &portal.LandingPage.UserTabs.ItemByName(%This.Name);
   Local boolean &activeTabFound = False;
   If &userTab <> Null Then
      &activeTabFound = True;
      %This.LoadUserTab(&portal, &lpt, &userTab);
   Else
      Return;
   End-If;
end-method;

method LoadSystemTiles
   /+ &portal as ApiObject, +/
   /+ &lpt as PTNUI:Model:LandingPageTab +/
   Local ApiObject &ltd = &portal.LandingTabDefinitions.ItemByName(%This.Name);
   If &ltd <> Null Then
      %This.LoadSystemTab(&portal, &lpt, &ltd);
      &m_exists = True;
   End-If;
end-method;

method SaveUserTiles
   /+ &portal as ApiObject, +/
   /+ &lpt as PTNUI:Model:LandingPageTab +/
   %This.SaveUserTab(&portal, &lpt);
   
   If Not (&portal.LandingPage.save()) Then
      MessageBox(0, "", 95, 10011, "Error saving landing page");
   End-If;
end-method;

